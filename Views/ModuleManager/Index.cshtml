@model List<ModuleSelection>
@{
    ViewData["Title"] = "Module Manager";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row m-3">

    <div class="col-2">

        <form id="NewModule" asp-controller="ModuleManager" asp-action="CreateModule" method="GET" class="mb-3">
            <button class="btn btn-outline-primary w-100">New Module</button>
        </form>

        @if (Model.Count() <= 0)
        {
            <div class="alert alert-info">No profiles to display</div>
        }
        else
        {
            foreach (ModuleSelection pro in Model)
            {
                <form asp-controller="ModuleManager" asp-action="GetModule" method="POST" on-success="GetModule_success">
                    <input name="idKey" value="@pro.Id" readonly hidden />
                    <button class="w-100 btn btn-light">@pro.Name</button>
                </form>
            }
        }

    </div>

    <div class="col-10">

        <form maestro-request id="EditModule" asp-controller="ModuleManager" asp-action="EditModule" method="POST" on-start="EditModule_start" on-timeout="EditModule_time" on-success="EditModule_success" on-fail="EditModule_fail" style="display:none">

            <input id="reqid" name="id" readonly hidden />

            <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                <li class="nav-item" role="presentation">
                    <a class="nav-link active" id="pills-request-tab" data-toggle="pill" href="#pills-request" role="tab" aria-controls="pills-request" aria-selected="true">Module</a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link" id="pills-response-tab" data-toggle="pill" href="#pills-response" role="tab" aria-controls="pills-response" aria-selected="false">Response</a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link" id="pills-blueprint-tab" data-toggle="pill" href="#pills-blueprint" role="tab" aria-controls="pills-blueprint" aria-selected="false">Blueprint</a>
                </li>
            </ul>

            <div class="tab-content" id="pills-tabContent">
                <div class="tab-pane fade show active" id="pills-request" role="tabpanel" aria-labelledby="pills-request-tab">
                    <div class="input-group mb-2">
                        <div class="input-group-prepend">
                            <div class="input-group-text">Name</div>
                        </div>
                        <input name="Name" type="text" class="form-control" id="reqName">
                    </div>

                    <div class="input-group mb-3">
                        <div class="input-group-toppend">
                            <span class="my-auto mr-3">Headers</span>
                            <input id="Hkey" type="text" class="form-control br-0 headerInput" placeholder="key">
                            <input id="Hval" type="text" class="form-control br-0 headerInput" placeholder="value">
                            <div class="input-group-append">
                                <button onclick="AddHeader('Hkey','Hval')" class="btn btn-primary" type="button" style="border-left:none; border-radius: 0 5px 5px 0;">Add</button>
                            </div>
                        </div>

                        <ul id="reqHeaders" class="list-group w-100"></ul>
                    </div>

                </div>
            </div>
            <button type="button" onclick="SaveAction()" class="btn btn-primary mt-2"><div class="text">Save</div><div id="loading"></div></button>
        </form>

    </div>
</div>

@section scripts
{
    <script>




        function SaveAction() {
            maestro.Module['action'] = 'save';
            $("#EditModule").submit();
        }
        function SendAction() {
            maestro.Module['action'] = 'send';
            $("#EditModule").submit();
        }

        $('#EditModule input, #EditModule textarea, #EditModule select').on('change', function (event) { maestro.Module[event.target.name] = event.target.value; });

        function AddHeader(h_keyID, h_valID) {
            let _key = $('#' + h_keyID).val();
            let _val = $('#' + h_valID).val();

            if (_key == null || _val == null) { return; }

            if (maestro.Module.Headers == null) { maestro.Module.Headers = {}; }
            maestro.Module.Headers[_key] = _val;

            CreateHeaderUI(maestro.Module.Headers);
        }
        function RemoveHeader(h_key) {
            delete maestro.Module.Headers[h_key];
            CreateHeaderUI(maestro.Module.Headers);
        }

        function RenderModule(reqData) {
            maestro.Module = reqData;

            $("#EditModule").show();

            $("#reqid").val(reqData.Id);
            $("#reqMethod").val(reqData.Method);
            $("#reqFormat").val(reqData.Format);
            $("#reqName").val(reqData.Name);
            $("#reqURL").val(reqData.Url);

            CreateHeaderUI(reqData.Headers);

            CreateBodyRAW(reqData.Body, $("#reqRaw"));
            CreateBodyRAW(reqData.rBody, $("#resRaw"));

            CreateMaestroBody(reqData.Body, $("#reqMaestro"));
            CreateMaestroBody(reqData.rBody, $("#resMaestro"));

            maestro.CreateTooltips();

            if (reqData.Variables == null) { reqData.Variables = {}; }
            else {
                maestro.DisplayVariables($('#bp-vars'));
            }
        }

        function CreateHeaderUI(content) {
            $("#reqHeaders").empty();
            if (content == null) { return; }
            Object.keys(content).forEach(function (key) {
                $("#reqHeaders").append(`
                <li class="w-100 list-group-item d-flex justify-content-between align-items-center">
                    <span>${key}</span><span>${content[key]}</span>
                    <button class="btn btn-outline-danger" type="button" onclick="RemoveHeader('${key}')">Remove</button>
                </li>`);
            });
        }


        function SetHeight(textarea) {
            textarea.style.height = "";
            textarea.style.height = textarea.scrollHeight + 3 + "px";
        }

        //Generate Body for editing
        function CreateBodyRAW(content, target$) {
            if (content == null) { target$.val(""); SetHeight(target$[0]); return; }
            target$.val(content);
            SetHeight(target$[0]);
        }
        function CreateMaestroBody(content, target$) {
            target$.empty();
            parser = new DOMParser();
            xmlDoc = parser.parseFromString(content, "text/xml");
            xml.Editor(xmlDoc, target$);
        }

        $("#Module input:checkbox").change(function (event) {
            if (event.target.checked) {
                $("#reqRaw").hide();
                $("#reqMaestro").show();
            }
            else {
                $("#reqRaw").show();
                SetHeight($("#reqRaw")[0]);
                $("#reqMaestro").hide();
            }
        });

        $("#Response input:checkbox").change(function (event) {
            if (event.target.checked) {
                $("#resRaw").hide();
                $("#resMaestro").show();
            }
            else {
                $("#resRaw").show();
                SetHeight($("#resRaw")[0]);
                $("#resMaestro").hide();
            }
        });

        function GetModule_success(result) {
            RenderModule(JSON.parse(result));
        }


        function EditModule_start() {
            console.log("GetData_start");
        }
        function EditModule_success(result) {
            console.log("GetData_success", result);

            let reqData = maestro.Module;
            reqData.rBody = result;

            CreateBodyRAW(reqData.rBody, $("#resRaw"));
            CreateMaestroBody(reqData.rBody, $("#resMaestro"));
        }


    </script>
}
